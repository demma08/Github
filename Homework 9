pragma solidity 0.8.17;

  library StringComparer {
  function compare(string memory str1, string memory str2) public pure returns (bool) {
    return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));
  }
}

interface Living {
  function eat(string memory food) external returns (string memory);
}

contract HasName {
  string internal _name;

  constructor(string memory name) {
    _name = name;
  }
}


abstract contract Animal is Living {
  function eat(string memory food) pure virtual public returns (string memory) {
    return string.concat("Animal eats ", food);
  }

  function sleep() pure virtual public returns (string memory) {
    return "Z-z-z-z-z....";
  }

  function makeSound() pure virtual public returns (string memory);
}
 contract Wolf is Animal {
  function makeSound() pure override public returns (string memory) {
    return "Awoo";
  }

  function eat(string memory food) pure override public returns (string memory) {
    require(StringComparer.compare(food, "meat"), "Can only eat meat");
    return Animal.eat(food);
  }
}
contract Dog is Animal {
  function makeSound() pure override public returns (string memory) {
    return "Woof";
  }

  function eat(string memory food) pure override public returns (string memory) {
    require(
      StringComparer.compare(food, "meat") || StringComparer.compare(food, "plant"),
      "Can only eat meat or plant"
    );
    require(!StringComparer.compare(food, "chocolate"), "Cannot eat chocolate");
    return Animal.eat(food);
  }
}

